{"version":3,"sources":["components/dashboard/header/Header.jsx","components/dashboard/canvas/sideBar/Left.jsx","components/dashboard/canvas/shapes/index.js","components/dashboard/canvas/sideBar/Right.jsx","components/dashboard/canvas/Canvas.jsx","components/dashboard/Dashboard.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Left","renderNodeHandler","menuDisabled","onClick","disabled","draw","nodes","context","dragTarget","i","length","drawFillRect","color","name","info","cornerRadius","lineJoin","lineWidth","beginPath","shadowBlur","shadowOffsetX","shadowOffsetY","strokeStyle","shadowColor","font","textAlign","textBaseline","strokeRect","x","y","w","h","rect","fillStyle","fill","sub","right","left","drawSubRect","fillText","Right","selectedNode","console","log","placeholder","Canvas","isDown","startX","startY","canvasSize","canvasRef","useRef","containerRef","useState","scale","setScale","setContext","overflow","setOverflow","clientX","clientY","setClient","next","setNodes","draggableCanvas","setDraggableCanvas","setSelectedNode","setDisabledMenu","useEffect","window","innerHeight","innerWidth","scrollDown","scrollLeft","current","scroll","devicePixelRatio","renderCtx","getContext","style","width","height","Math","floor","clearRect","clientWidth","clientHeight","handleMouseUp","e","node","flag","allNodes","previous","success","fail","else","if","includes","push","ref","draggable","transformOrigin","transform","onMouseDown","parseInt","nativeEvent","offsetX","canvas","clientLeft","offsetY","clientTop","isTarget","hitNode","onMouseMove","mouseX","mouseY","dx","dy","onMouseUp","onMouseOut","onDrag","deltaX","deltaY","scrollBy","onWheel","onDragStart","preview","document","createElement","display","dataTransfer","setDragImage","Dashboard","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1e8c4858.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header() {\n    return (\n        <div className='header-container'>\n            <h2>Canvas</h2>\n\n            <button className='save'>\n                <i className=\"fas fa-save\"></i>\n            </button>\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react'\n\nfunction Left({ renderNodeHandler, menuDisabled }) {\n    return (\n        <div className='left-container'>\n            <div className='menu-item' onClick={() => renderNodeHandler(\"Speak\")}>\n                <i className=\"fas fa-comment menu-icon\"></i>\n                <p className='menu-name'>Speak</p>\n            </div>\n            <div className='menu-item' onClick={() => renderNodeHandler(\"Choice\")}>\n                <i className=\"fas fa-project-diagram menu-icon\"></i>\n                <p className='menu-name'>Choice</p>\n            </div>\n            <div className='menu-item' onClick={() => renderNodeHandler(\"DTMF\")}>\n                <i className=\"fas fa-calculator menu-icon\"></i>\n                <p className='menu-name'>DTMF</p>\n            </div>\n            <div className='menu-item' onClick={() => renderNodeHandler(\"Record\")}>\n                <i className=\"fas fa-microphone menu-icon\"></i>\n                <p className='menu-name'>Record</p>\n            </div>\n            <div className='menu-item' onClick={() => renderNodeHandler(\"API\")}>\n                <i className=\"fas fa-globe menu-icon\"></i>\n                <p className='menu-name'>API</p>\n            </div>\n            <div className='menu-item' onClick={() => renderNodeHandler(\"SMS\")}>\n                <i className=\"fas fa-envelope menu-icon\"></i>\n                <p className='menu-name'>SMS</p>\n            </div>\n            <div className='menu-item' onClick={() => renderNodeHandler(\"Flow\")}>\n                <i className=\"fab fa-uncharted menu-icon\"></i>\n                <p className='menu-name'>Flow</p>\n            </div>\n            <div className='menu-item' onClick={() => renderNodeHandler(\"Transfer\")}>\n                <i className=\"fas fa-people-arrows menu-icon\"></i>\n                <p className='menu-name'>Transfer</p>\n            </div>\n            <div className={menuDisabled ? 'menu-item disabled' : \"menu-item\"} onClick={() => renderNodeHandler(\"HangUp\")} disabled={menuDisabled}>\n                <i className=\"fas fa-phone-slash menu-icon\"></i>\n                <p className='menu-name'>HangUp</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Left\n","const draw = ({ nodes, context, dragTarget }) => {\n  for (let i = 0; i < nodes.length; i++) {\n    drawFillRect({\n      context,\n      color: dragTarget && dragTarget.name === nodes[i].name ? \"blue\" : \"white\",\n      info: nodes[i].info,\n      name: nodes[i].name\n    });\n  }\n};\n\nconst drawSubRect = (context, info) => {\n  // console.log(info, info.sub.right);\n\n  context.beginPath();\n  if (info.sub.right && info.sub.right.length) {\n    for (let i = 0; i < info.sub.right.length; i++) {\n      if (i === 0) {\n        context.rect(info.sub.right[i].x + info.w - info.sub.right[i].w, info.sub.right[i].y + (info.h / 2 - 10), info.sub.right[i].w, info.sub.right[i].h);\n      } else {\n        context.rect(info.sub.right[i].x + info.w - info.sub.right[i].w, info.sub.right[i].y + (info.h / 2 + 15), info.sub.right[i].w, info.sub.right[i].h);\n      }\n    }\n  }\n  if (info.sub.left) {\n    context.rect(info.sub.left.x, info.sub.left.y + (info.h / 2 - 10), info.sub.left.w, info.sub.left.h);\n  }\n  context.fillStyle = \"gray\";\n  context.shadowColor = 'white';\n  context.fill();\n}\n\nconst drawFillRect = ({ context, name, info, color }) => {\n  var cornerRadius = 10;\n\n  // Set faux rounded corners\n  context.lineJoin = \"round\";\n  context.lineWidth = cornerRadius;\n\n  // Change origin and dimensions to match true size (a stroke makes the shape a bit larger)\n  context.beginPath();\n  context.shadowBlur = 10;\n  context.shadowOffsetX = 1;\n  context.shadowOffsetY = 1;\n  context.strokeStyle = color;\n  context.shadowColor = 'gray';\n  context.font = \"20px Georgia\";\n  context.textAlign = \"center\";\n  context.textBaseline = \"middle\";\n  context.strokeRect(info.x + (cornerRadius / 2), info.y + (cornerRadius / 2), info.w - cornerRadius, info.h - cornerRadius);\n  context.rect(info.x + (cornerRadius / 2), info.y + (cornerRadius / 2), info.w - cornerRadius, info.h - cornerRadius);\n  context.fillStyle = \"white\";\n  context.shadowColor = 'white';\n  context.fill();\n  drawSubRect(context, info)\n  context.fillStyle = \"black\";\n  context.fillText(name, info.x + (info.w / 2), info.y + (info.h / 2));\n}\n\nexport { draw };\n\n","import React from 'react'\n\nfunction Right({ selectedNode }) {\n    console.log(selectedNode);\n    return (\n        <div className='right-sidebar-container'>\n            <div className='header-section'>\n                <h3>{selectedNode.name}</h3>\n            </div>\n            <div className='input-container'>\n                <textarea placeholder='Tell VIVA what to say'/>\n                <p>Press \"{\"{\"}\" to add variables.</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Right\n","import React, { useRef, useState, useEffect } from 'react';\nimport Left from './sideBar/Left';\nimport { draw } from './shapes';\nimport Right from './sideBar/Right';\n\nfunction Canvas() {\n    // variables\n    let isDown = false;\n    let dragTarget = null;\n    let startX = null;\n    let startY = null;\n    const zoomBy = 0.01;\n    const dragInertia = 40;\n    const canvasSize = 2000;\n    let translateX = 0, translateY = 0;\n\n    // local state\n    const canvasRef = useRef(null);\n    const containerRef = useRef(null);\n    const [scale, setScale] = useState(1);\n    const [context, setContext] = useState(null);\n    const [overflow, setOverflow] = useState(\"scroll\");\n    const [{ clientX, clientY }, setClient] = useState({\n        clientX: 0,\n        clientY: 0\n    });\n    const [nodes, setNodes] = useState([\n        {\n            name: \"Home\",\n            info: {\n                x: 300,\n                y: 300,\n                w: 130,\n                h: 80,\n                sub: {\n                    right: [\n                        {\n                            x: 300,\n                            y: 300,\n                            w: 20,\n                            h: 15\n                        }\n                    ]\n                }\n            },\n            next: null\n        }\n    ]);\n    const [draggableCanvas, setDraggableCanvas] = useState(true);\n    const [selectedNode, setSelectedNode] = useState(null);\n    const [menuDisabled, setDisabledMenu] = useState(false);\n\n    // life-cycle hooks\n    useEffect(() => {\n        const { innerHeight, innerWidth } = window;\n\n        const scrollDown = (canvasSize - innerHeight) / 2;\n        const scrollLeft = (canvasSize - innerWidth) / 2;\n\n        containerRef.current.scroll(scrollLeft, scrollDown);\n    }, []);\n\n    useEffect(() => {\n        const { current } = canvasRef;\n        let scale = window.devicePixelRatio;\n\n        if (current) {\n            const renderCtx = current.getContext('2d');\n\n            if (renderCtx) {\n                window.devicePixelRatio = 1;\n                current.style.width = canvasSize + \"px\";\n                current.style.height = canvasSize + \"px\";\n\n                current.width = Math.floor(canvasSize * scale);\n                current.height = Math.floor(canvasSize * scale);\n\n                // configuring scaling for shapes.\n                renderCtx.scale(scale, scale);\n                renderCtx.font = '10px Arial';\n                renderCtx.textAlign = 'center';\n                renderCtx.textBaseline = 'middle';\n\n                setContext(renderCtx);\n            }\n        }\n    }, [context]);\n\n    useEffect(() => {\n        if (context) {\n            context.clearRect(0, 0, context.clientWidth, context.clientHeight);\n\n            draw({\n                nodes,\n                context,\n                dragTarget\n            });\n        }\n    }, [nodes, context, dragTarget]);\n\n    // functions\n    const renderNodeHandler = (name) => {\n        let node, flag = false;\n        let allNodes = [...nodes];\n\n        if (name === \"API\") {\n            node = {\n                name,\n                info: {\n                    x: 300,\n                    y: 300,\n                    w: 130,\n                    h: 80,\n                    sub: {\n                        right: [\n                            {\n                                name: \"fail\",\n                                x: 300,\n                                y: 300,\n                                w: 20,\n                                h: 15\n                            },\n                            {\n                                name: \"success\",\n                                x: 300,\n                                y: 300,\n                                w: 20,\n                                h: 15\n                            }\n                        ]\n                        ,\n                        left: {\n                            x: 300,\n                            y: 300,\n                            w: 20,\n                            h: 15\n                        }\n                    }\n                },\n                previous: null,\n                success: null,\n                fail: null\n            }\n        } else if (name === \"Choice\") {\n            node = {\n                name,\n                info: {\n                    x: 300,\n                    y: 300,\n                    w: 130,\n                    h: 80,\n                    sub: {\n                        right: [\n                            {\n                                name: \"if\",\n                                x: 300,\n                                y: 300,\n                                w: 20,\n                                h: 15\n                            },\n                            {\n                                name: \"else\",\n                                x: 300,\n                                y: 300,\n                                w: 20,\n                                h: 15\n                            }\n                        ],\n                        left: {\n                            x: 300,\n                            y: 300,\n                            w: 20,\n                            h: 15\n                        }\n                    }\n                },\n                previous: null,\n                else: null,\n                if: null\n            }\n        } else if (name === \"HangUp\" || name === \"Transfer\") {\n            node = {\n                name,\n                info: {\n                    x: 300,\n                    y: 300,\n                    w: 130,\n                    h: 80,\n                    sub: {\n                        left: {\n                            x: 300,\n                            y: 300,\n                            w: 20,\n                            h: 15\n                        }\n                    }\n                },\n                previous: null,\n            }\n        } else {\n            node = {\n                name,\n                info: {\n                    x: 300,\n                    y: 300,\n                    w: 130,\n                    h: 80,\n                    sub: {\n                        right: [\n                            {\n                                x: 300,\n                                y: 300,\n                                w: 20,\n                                h: 15\n                            }\n                        ],\n                        left: {\n                            x: 300,\n                            y: 300,\n                            w: 20,\n                            h: 15\n                        }\n                    }\n                },\n                previous: null,\n                next: null\n            }\n        }\n\n        if (name === \"HangUp\") {\n            for (let i = 0; i < allNodes.length; i++) {\n                if (allNodes[i].name.includes(\"HangUp\")) {\n                    setDisabledMenu(true);\n                    flag = true;\n                } else {\n                    flag = false;\n                }\n            }\n\n            if (!flag) {\n                allNodes.push(node);\n            }\n        } else {\n            allNodes.push(node);\n        }\n\n        setNodes(allNodes);\n    }\n\n    const onDragStartHandler = (e) => {\n        const preview = document.createElement(\"div\");\n        preview.style.display = \"none\";\n        e.dataTransfer.setDragImage(preview, 0, 0);\n\n        setClient({ clientX: e.clientX, clientY: e.clientY });\n    }\n\n    const onDragHandler = (e) => {\n        if (e.clientX && e.clientY) {\n            const deltaX = (clientX - e.clientX) / dragInertia;\n            const deltaY = (clientY - e.clientY) / dragInertia;\n\n            containerRef.current.scrollBy(deltaX, deltaY);\n        }\n    }\n\n    const onWheelHandler = (e) => {\n        if (e.deltaY > 0) {\n            if (scale === 1) {\n                setOverflow(\"hidden\");\n            }\n            if (scale > 1) {\n                setScale(scale - zoomBy);\n            }\n        } else {\n            setScale(scale + zoomBy);\n        }\n    }\n\n    // const drawConnector = (from, to) => {\n    //     context.strokeStyle = \"orange\";\n    //     context.lineWidth = 3;\n    //     context.beginPath();\n    //     context.moveTo(from.x, from.y);\n    //     context.bezierCurveTo(120, 160, 180, 10, to.x, to.y);\n    //     context.stroke();\n    // }\n\n    const hitNode = (x, y) => {\n        let isTarget = null;\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (x >= node.info.x && x <= node.info.x + node.info.w && y >= node.info.y && y <= node.info.y + node.info.h) {\n                dragTarget = node;\n                isTarget = true;\n                setSelectedNode(node);\n                setDraggableCanvas(false);\n\n                break;\n\n                // -------------------\n                // commented code for getting the connector rectangle\n                // -------------------\n\n                // if (node.info && node.info.sub) {\n                //     if (node.info.sub.right && node.info.sub.right.length) {\n                //         for (let j = 0; j < node.info.sub.right.length; j++) {\n                //             if (j === 0) {\n                //                 if (x >= node.info.sub.right[j].x + node.info.w - node.info.sub.right[j].w && x <= node.info.sub.right[j].x + node.info.w - node.info.sub.right[j].w + node.info.sub.right[j].w && y >= node.info.sub.right[j].y + (node.info.h / 2 - 10) && y <= node.info.sub.right[j].y + (node.info.h / 2 - 10) + node.info.sub.right[j].h) {\n                //                     dragTarget = null;\n                //                     isTarget = true\n\n                //                     node.info.sub.right[j].x = x\n                //                     node.info.sub.right[j].y = y\n\n                //                     setDraggableCanvas(false);\n\n                //                     // break;\n                //                 }\n                //             } else {\n                //                 if (x >= node.info.sub.right[j].x + node.info.w - node.info.sub.right[j].w && x <= node.info.sub.right[j].x + node.info.w - node.info.sub.right[j].w + node.info.sub.right[j].w && y >= node.info.sub.right[j].y + (node.info.h / 2 + 15) && y <= node.info.sub.right[j].y + (node.info.h / 2 + 15) + node.info.sub.right[j].h) {\n                //                     dragTarget = null;\n                //                     isTarget = true\n\n                //                     node.info.sub.right[j].x = x\n                //                     node.info.sub.right[j].y = y\n\n                //                     setDraggableCanvas(false);\n\n                //                     // break;\n                //                 }\n                //             }\n                //         }\n                //     }\n                // }\n\n                // -------------------\n                // commented code for getting the connector rectangle\n                // -------------------\n            } else {\n                setDraggableCanvas(true)\n            }\n        }\n\n        draw({\n            nodes,\n            context,\n            dragTarget,\n        });\n\n\n        return isTarget;\n\n    }\n\n    const handleMouseDown = e => {\n        startX = parseInt(e.nativeEvent.offsetX - context.canvas.clientLeft);\n        startY = parseInt(e.nativeEvent.offsetY - context.canvas.clientTop);\n        isDown = hitNode(startX, startY);\n    }\n\n    const handleMouseMove = e => {\n        if (!isDown) return;\n\n        const mouseX = parseInt(e.nativeEvent.offsetX - context.canvas.clientLeft);\n        const mouseY = parseInt(e.nativeEvent.offsetY - context.canvas.clientTop);\n\n        const dx = mouseX - startX;\n        const dy = mouseY - startY;\n\n        startX = mouseX;\n        startY = mouseY;\n\n        if (dragTarget) {\n            dragTarget.info.x += dx;\n            dragTarget.info.y += dy;\n            // left\n            if (dragTarget.info.sub.left) {\n                dragTarget.info.sub.left.x += dx;\n                dragTarget.info.sub.left.y += dy;\n            }\n            // right\n            if (dragTarget.info.sub.right && dragTarget.info.sub.right.length) {\n                for (let i = 0; i < dragTarget.info.sub.right.length; i++) {\n                    dragTarget.info.sub.right[i].x += dx;\n                    dragTarget.info.sub.right[i].y += dy;\n                }\n            }\n\n            context.clearRect(0, 0, context.canvas.clientWidth, context.canvas.clientHeight);\n\n            draw({\n                nodes,\n                context,\n                dragTarget\n            });\n        }\n\n        // -------------------\n        // commented code for updating the coordinates of the starting connector\n        // -------------------\n\n        // for (let i = 0; i < nodes.length; i++) {\n        //     let node = nodes[i];\n\n        //     if (node.info && node.info.sub && node.info.sub.right && node.info.sub.right.length) {\n        //         for (let j = 0; j < node.info.sub.right.length; j++) {\n        //             let subNode = node.info.sub.right[i];\n\n        //             context.strokeStyle = \"orange\";\n        //             context.lineWidth = 3;\n        //             context.beginPath();\n        //             context.moveTo(subNode.x, subNode.y);\n        //             context.bezierCurveTo(120, 160, 180, 10, mouseX, mouseY);\n        //             context.stroke();\n        //         }\n        //     }\n        // }\n\n        // -------------------\n        // commented code for updating the coordinates of the starting connector\n        // -------------------\n\n    }\n\n    const handleMouseUp = e => {\n        dragTarget = null;\n        isDown = false;\n\n        draw({\n            nodes,\n            context,\n            dragTarget\n        });\n\n    }\n\n    const handleMouseOut = e => {\n        handleMouseUp(e);\n    }\n\n    return (\n        <div className='canvas-wrapper'>\n            <Left\n                menuDisabled={menuDisabled}\n                renderNodeHandler={renderNodeHandler}\n            />\n            <div\n                className='canvas-container'\n                ref={containerRef}\n            >\n                <canvas\n                    draggable={draggableCanvas}\n                    ref={canvasRef}\n                    className='canvas'\n                    style={{\n                        overflow,\n                        transformOrigin: \"0 0\",\n                        transform: `scale(${scale}, ${scale}) translate(${translateX}px, ${translateY}px)`,\n                    }}\n                    // node methods\n                    onMouseDown={handleMouseDown}\n                    onMouseMove={handleMouseMove}\n                    onMouseUp={handleMouseUp}\n                    onMouseOut={handleMouseOut}\n                    // canvas methods\n                    onDrag={onDragHandler}\n                    onWheel={onWheelHandler}\n                    onDragStart={onDragStartHandler}\n                />\n                {selectedNode && <Right selectedNode={selectedNode} />}\n            </div>\n        </div>\n    );\n}\n\nexport default Canvas\n","import React from 'react';\nimport Header from './header/Header';\nimport Canvas from './canvas/Canvas';\n\nfunction Dashboard() {\n    return (\n        <div className=\"dashboard\">\n            <Header />\n            <Canvas />\n        </div>\n    );\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport Dashboard from './components/dashboard/Dashboard';\n\nfunction App() {\n  return (\n    <Dashboard />\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}